vector<vector<int>> fourSum(vector<int>& nums, int target) {
    int n = nums.size();
    set<vector<int>>s;
    for(int i = 0; i < n-3; ++i){
        for(int j = i+1; j < n-2; ++j){
            for(int k = j+1; k < n-1; ++k){
                for(int l = k+1; l < n; ++l){
                    if(nums[i]+nums[j]+nums[k]+nums[l] == target){
                        vector<int> temp =
                            {nums[i],nums[j],nums[k],nums[l]};
                        sort(temp.begin(),temp.end());
                        s.insert(temp);
                    }
                }
            }
        }
    }
    vector<vector<int>> ans(s.begin(),s.end());
    return ans;
}

vector<vector<int>> fourSum(vector<int>& nums, int target) {
    int n = nums.size();
    set<vector<int>> s;
    for(int i = 0; i < n-2; ++i){
        for(int j = i+1; j < n-1; ++j){
            set<long long> hsh;
            for(int k = j+1; k < n; ++k){
                long long sum = nums[i]+nums[j];
                sum += nums[k];
                long long fourth = target-sum;
                if(hsh.find(fourth) != hsh.end()){
                    vector<int>temp = {nums[i],nums[j],nums[k],(int)fourth};
                    sort(temp.begin(),temp.end());
                    s.insert(temp);
                }
                hsh.insert(nums[k]);
            }
        }
    }
    vector<vector<int>> ans(s.begin(),s.end());
    return ans;
}

vector<vector<int>> fourSum(vector<int>& nums, int target) {
    int n = nums.size();
    sort(nums.begin(),nums.end());
    vector<vector<int>> ans;
    for(int i = 0; i < n-3; ++i){
        if(i != 0 && nums[i] == nums[i-1]) continue;
        for(int j = i+1; j < n-2; ++j){
            if(j != i+1 && nums[j] == nums[j-1]) continue;
            int low = j+1 ,high = n-1;
            long long sum = (long long)target - nums[i] - nums[j];
            while(low < high){
                if(nums[low] + nums[high] == sum){
                    ans.push_back({nums[i],nums[j],nums[low],nums[high]});
                    low++ ,high--;
                    while(low < high && low != j+1 && nums[low] == nums[low-1])
                        low++;
                    while(low < high && high != n-1 && nums[high] == nums[high+1])
                        high--;
                }
                else if(nums[low] + nums[high] > sum)
                    high--; 
                else
                    low++;
            }
        }
    }
    return ans;
}