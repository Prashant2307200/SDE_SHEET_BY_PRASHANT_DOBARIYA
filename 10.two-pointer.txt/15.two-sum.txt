vector<int> twoSum(vector<int>& nums, int target) {
    int n = nums.size();
    for(int i = 0; i < n; ++i){
        for(int j = i+1; j < n; ++j){
            if(nums[i] + nums[j] == target)
                return {i,j};
        }
    }
    return {-1,-1};
}

string read(int n, vector<int> book, int target){
    sort(book.begin(),book.end());
    int s = 0, e = n-1;
    while(s < e){
        int sum = book[s] + book[e];
        if(sum == target)
            return "YES";
        else if(sum < target)
            s++;
        else
            e--;     
    }
    return "NO";
}

vector<int> twoSum(vector<int>& nums, int target) {
    int n = nums.size();
    unordered_map<int,int> hsh;
    for(int i = 0; i < n; ++i){
        int moreNeeded = target - nums[i];
        if(!hsh.empty() && hsh.find(moreNeeded) != hsh.end())
            return {hsh[moreNeeded],i};
        hsh[nums[i]] = i;
    }
    return {-1,-1};
}