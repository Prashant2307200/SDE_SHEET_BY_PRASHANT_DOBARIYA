class Solution {
    void f(int i,int n,vector<int>& nums,vector<vector<int>>& ans,vector<int>& subset){
        if(i == n){
            ans.push_back(subset);
            return;
        } 
        int next_i = i + 1;
        while (next_i < n && nums[next_i] == nums[i]) ++next_i;
        subset.push_back(nums[i]);
        f(i+1,n,nums,ans,subset);
        subset.pop_back();
        f(next_i,n,nums,ans,subset); 
    }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) { 
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        vector<int> subset;
        f(0, nums.size(), nums, ans, subset);
        return ans;
    }
};


class Solution {
    void helper(int idx, vector<int>& nums, vector<vector<int>>& subsets, vector<int>& subset) {
        subsets.push_back(subset);
        int n = nums.size();
        for (int i = idx; i < n; ++i) {
            if (i > idx && nums[i] == nums[i - 1]) continue;
            subset.push_back(nums[i]);
            helper(i + 1, nums, subsets, subset);
            subset.pop_back();
        }
    }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> subsets;
        vector<int> subset;
        sort(nums.begin(), nums.end());
        helper(0, nums, subsets, subset);
        return subsets;
    }
};
    
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans = {{}};
        sort(nums.begin(), nums.end());   
        int start, end = 0, n = nums.size();
        for (int i = 0; i < n; ++i) {
            start = (i > 0 && nums[i] == nums[i - 1]) ? end : 0;
            end = ans.size();
            for (int j = start; j < end; ++j) {
                vector<int> subset = ans[j];
                subset.push_back(nums[i]);
                ans.push_back(subset);
            }
        }
        return ans;
    }