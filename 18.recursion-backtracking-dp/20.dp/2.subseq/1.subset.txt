class Solution {
    vector<vector<int>> ans;
    void f(int i, int n, vector<int>& nums, vector<int>& subset) {
        if(i == n) {
            ans.push_back(subset);
            return;
        }
        subset.push_back(nums[i]);
        f(i+1, n, nums, subset);
        subset.pop_back();
        f(i+1, n, nums,subset);
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int> subset;
        f(0, nums.size(), nums, subset);
        return ans;
    }
};


class Solution {
    vector<vector<int>> ans;
    void f(int idx, int n, vector<int>& nums, vector<int>& subset) { 
        ans.push_back(subset);
        for(int i = idx; i < n; ++i) {
            subset.push_back(nums[i]);
            f(i+1, n, nums, subset);
            subset.pop_back(); 
        }
    }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int> subset;
        f(0, nums.size(), nums, subset);
        return ans;
    }
}; 

    
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans = {{}}; 
        for(auto& num: nums) {
            int n = ans.size();
            for(int i = 0; i < n; ++i) {
                vector<int> subset = ans[i];
                subset.push_back(num);
                ans.push_back(subset);
            }
        }
        return ans;
    }
