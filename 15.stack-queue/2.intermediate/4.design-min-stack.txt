class MinStack {
public:
    vector<pair<int,int>> st;
    MinStack() {
        while (st.empty() == false) st.pop();
        mini = INT_MAX;
    }
    void push(int val) {
        if(st.empty()) {
            pair<int,int> p = make_pair(val, val);
            st.push_back(p);
        }
        else{
            pair<int,int> p;
            p.first = val;
            p.second = min(val, st.back().second);
            st.push_back(p);
        }
    }
    void pop() {
        st.pop_back();
    }
    int top() {
        return st.back().first;
    }
    int getMin() {
        return st.back().second;
    }
};


class MinStack {
  stack<long long> st;
  long long mini;
  public:
    MinStack() {
        while (st.empty() == false) st.pop();
        mini = INT_MAX;
    }
    void push(int value) {
        long long val = (long long)value;
        if(st.empty())
            mini = val, st.push(val);
        else {
            if(val < mini)
                st.push(2*1LL*val - mini), mini = val;
            else
                st.push(val);
        }
    }
    void pop() {
        if (st.empty()) 
            return;
        long long el = st.top();
        st.pop();
        if (el < mini) 
            mini = 2 * mini - el;
    }
    int top() {
        if (st.empty()) 
            return -1;
        long long el = st.top();
        if (el < mini) 
            return mini;
        return el;
    }
    int getMin() {
      return mini;
    }
};
 