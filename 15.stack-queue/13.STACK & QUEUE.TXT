    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size() ,ans = 0;
        for(int i = 0; i < n; ++i){
            int minH = 1e9;
            for(int j = i; j < n; ++j){
                minH = min(minH,heights[j]);
                ans = max(ans,minH*(j-i+1));
            }
        }return ans;
    }

    int largestRectangleArea(vector<int>& heights) { 
        int n = heights.size();
        stack<int> st;
        int leftSmall[n];
        int rightSmall[n]; 
        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            if(st.empty()) leftSmall[i] = -1;
            else leftSmall[i] = st.top();
            st.push(i);
        }
        while (!st.empty()) {
            st.pop();
        }
        for (int i = n-1; i >= 0; i--) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            if (st.empty()) rightSmall[i] = n;
            else  rightSmall[i] = st.top();
            st.push(i);
        }
        int maxA = 0;
        for (int i = 0; i < n; i++) {
            maxA = max(maxA, heights[i]*(rightSmall[i]-leftSmall[i]-1));
        }
        return maxA; 
    }


    int largestRectangleArea(vector<int>& heights) {
        heights.push_back(0);
        int n = heights.size();
        stack<int> s;
        int ans = 0 ,i = 0;
        while(i < n){
            while(!s.empty() && heights[i] < heights[s.top()]){
                int top = s.top();
                int h = heights[top];
                s.pop();
                if(s.empty()){
                    ans = max(ans,h*i);
                }else{
                    int len = i - s.top() - 1;
                    ans = max(ans,h*len);
                }
            }s.push(i);
            ++i;
        }
        return ans;
    }

    O(n3)

 

multiset<int,greater<int>> s;
for(int i = 0; i < k; ++i){
    s.insert(a[i]);
}ans.push_back(*s.begin());
for(int i = k; i < n; ++i){
    s.erase(s.lower_bound(a[i-k]));
    s.insert(a[i]);
    ans.push_back(*s.begin());
}

deque<int> dq;
for(int i = 0; i < k; ++i){
    while(!dq.empty() && a[dq.back()] < a[i]){
        dq.pop();
    }dq.push_back(i);
}ans.push_back(nums[q.front()]);
for(int i = k; i < n; ++i){
    if(q.front() == i-k){
        q.pop_front();
    }while(!dq.empty() && a[dq.back()] < a[i]){
        dq.pop();
    }dq.push_back(i);
    ans.push_back(nums[q.front()]);
}

int largestRectangleArea(vector<int>& heights) {
    int n = heights.size() ,ans = 0;
    for(int i = 0; i < n; ++i){
        int minH = 1e9;
        for(int j = i; j < n; ++j){
            minH = min(minH,heights[j]);
            ans = max(ans,minH*(j-i+1));
        }
    }return ans;
}

int largestRectangleArea(vector<int>& heights) {
    heights.push_back(0);
    int n = heights.size();
    stack<int> s;
    int ans = 0;
    int i = 0;
    while(i < n){
        while(!s.empty() && heights[i] < heights[s.top()]){
            int top = s.top();
            int h = heights[top];
            s.pop();
            if(s.empty()){
                ans = max(ans,h*i);
            }else{
                int len = i - s.top() - 1;
                ans = max(ans,h*len);
            }
        }s.push(i);
        ++i;
    }
    return ans;
}

int trap(vector<int>& height) {
    int n = height.size();
    int maxi = height[0] ,idx = 0;
    for(int i = 1; i < n; ++i){
        if(maxi < height[i]){
            maxi = height[i];
            idx = i;
        }
    }int water = 0;
    int maxiL = height[0];
    for(int i = 1; i < idx; ++i){
        int level = height[i];
        int unit = maxiL-level;
        if(unit > 0){
            water +=  unit;
        }maxiL = max(maxiL,level);
    }int maxiR = height[n-1];
    for(int i = n-2 ;i > idx; --i){
        int level = height[i];
        int unit = maxiR-height[i];
        if(unit > 0){
            water += unit;
        }maxiR = max(maxiR,level);
    }return water;
}

int trap(vector<int>& height) {
    int n = height.size() ,ans = 0;
    stack<int> st;
    for(int i = 0; i < n; ++i){
        while(!st.empty() && height[st.top()] < height[i]){
            int cur = st.top();
            st.pop();
            if(st.empty()){
                break;
            }else{
                int diff = i - st.top() - 1;
                ans += diff * max(0,min(height[st.top()],height[i])-height[cur]);
            }
        }st.push(i);
    }return ans;
}

for(int i = 0; i < n; ++i){
    int days = 0;
    for(int j = i; j >= 0; --j){
        if(prices[i] >= prices[j]){
            days++;
        }else{
            break;
        }
    }
}

vector<int> stockSpan(vector<int> prices){
    vector<int> ans;
    stack<pair<int,int>> s;
    for(price : prices){
        int days = 1;
        while(!s.empty() && st.top().first <= price){
            days += s.top().second
            s.pop();
        }s.push({price,days});
        ans.push_back(days);
    }return ans;
}

unordered_map<char,int>sym={{'[',-3},{']',3},{'{',-2},{'}',2},{'(',-1},{')',1}};
string isBalanced(string s){
    stack<char>st;
    for(char brac:s){
        if(sym[brac]<0) st.push(brac);
        else{
            char top = st.top();
            st.pop();
            if(sym[top]+sym[brac]!=0 || st.empty()) return "NO";
        }
    }if(st.empty()) return "YES";
    return "NO";
}

vector<int> NGE(vector<int>&v){
    vector<int>nge(v.size());
    stack<int>st;
    for(int i=0 ;i<v.size();i++){
        while(!st.empty() && v[i]>v[st.top()]){
            nge[st.top()] = i; st.pop();
        }st.push(i);
    }while(!st.empty()){
        nge[st.top]=-1;
        st.pop();
    }return nge;
}int n; cin>>n; vector<int>v(n);
for(auto &val:v) cin>>val;
vector<int>nge = NGE(v);
for(int i=0;i<n;i++) cout<<v[i]<<" "<<((nge[i]==-1)?-1:v[nge[i]])<<endl;

bool redundantParentheses(string s){
    stack<char> st;
    bool ans = 0;
    int n = s.size();
    for(int i = 0; i < n; ++i){
        if(s[i] == 'op'){
            st.push(s[i]);
        }else if(s[i] == 'open'){
            st.push(s[i]);
        }else if(s[i] == 'close'){
            if(st.top() == 'open'){
                ans = true;
                break;
            }while(st.top() == 'op'){
                st.pop();
            }st.pop();
        }
    }return ans;
}
