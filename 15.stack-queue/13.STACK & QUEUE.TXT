// stack using array
#define n 100
class Stack{
    int* arr;
    int Top;
    public :
        Stack(){
            arr = new int[n];
            Top = -1;
        }
        bool empty(){
            return Top == -1;
        }
        void push(int x){
            if(Top == n-1){
                cout << "Stack overflow" << endl;
                return;
            }
            arr[++Top] = x;
        }
        void pop(){
            if(empty()){
                 cout << "Stack underflow" << endl;
                 return;
            }
            Top--;
        }
        int top(){
            if(empty()){
                cout << "No element in stack" << endl;
                return -1; 
            }
            return arr[Top];
        }
};

int main() {

    int arr[] = {1,2,3,4,5};
    Stack st;
    
    for(int i = 0; i < 5; ++i)
        st.push(arr[i]);
        
    while(!st.empty()){
        cout << st.top() << " ";
        st.pop();
    }cout << endl;

    return 0;
}



// queue using array
#define n 100
class Queue{
    
    int* arr;
    int Front ,back;
    
    public :
        Queue(){
            arr = new int[n];
            Front = -1;
            back = -1;
        }
        bool empty(){
            return Front>back || Front==-1;
        }
        void push(int x){
            if(back == n-1){
                cout << "Overflow" << endl;
                return;
            }   
            if(empty()){
                Front++; 
            }
            arr[++back] = x;
        }
        void pop(){
            if(empty()){
                cout << "Underflow" << endl;
                return;
            }
            Front++;
        }
        int front(){
            if(empty()){
                cout << "No element in queue" << endl;
                return -1;
            }
            return arr[Front];
        }
};
 
int main(){
     
    int arr[] = {1,2,3,4,5};
    Queue q;
     
    for(int i = 0; i < 5; ++i)
        q.push(arr[i]);
     
    while(!q.empty()){
        cout << q.front() << " ";
        q.pop();
    }cout << endl;
     
    return 0;
}



// stack using queue
class Stack{
    int N;
    queue<int> q1;
    queue<int> q2;
public :
    Stack(){
        N = 0;
    }
    void push(int x){
       q2.push(x); 
       N++;
       while(!q1.empty()){
           q2.push(q1.front());
           q1.pop();
       }
       swap(q1,q2);
    }
    void pop(){
        q1.pop();
        N--;
    }
    int top(){
        return q1.front();
    }
    int size(){
        return N;
    }
};



class Stack{
    int N;
    queue<int> q1;
    queue<int> q2;
public :
    Stack(){
        N = 0;
    }
    void push(int x){
        N++;
        q1.push(x);
    }
    void pop(){
        if(q1.empty()){
            return;
        }
        N--;
        while(q1.size() != 1){
            q2.push(q1.front());
            q1.pop(); 
        }q1.pop();
        swap(q1,q2);
    }
    int top(){
        if(q1.empty()){
            return -1;
        }
        while(q1.size() != 1){
            q2.push(q1.front());
            q1.pop(); 
        }int ans = q1.front();
        q1.pop();
        q2.push(ans);
        swap(q1,q2);
        return ans;
    }
    int size(){
        return N;
    }
};



// queue using stack
class Queue{
    int N;
    stack<int> s1 ,s2;
    public:
        Queue(){
            N = 0;
        }
        bool empty(){
            return s1.empty() && s2.empty();
        }
        void push(int x){
            s1.push(x);
        }
        int pop(){
            if(empty()){
                cout << "Underflow" << endl;
                return -1;
            }
            while(!s1.empty()){
                s2.push(s1.top());
                s1.pop();
            }int ans = s2.top();
            s2.pop(); 
            return ans;
        }
};



// stack using linked list
class node{
public:
    int data;
    node* next;
    node(int x){
        data = x;
        next = NULL;
    }
};

class Stack{
    node* Top;
    public :
        Stack(){
            Top = NULL;
        }
        bool empty(){
            return Top == NULL;
        }
        void push(int x){
            node* n = new node(x);
            if(empty()){
                Top = n;
                return ;
            }
            n -> next = Top;
            Top = n;
        }
        void pop(){
            if(empty()){
                return ;
            }
            node* toDel = Top;
            Top = Top -> next;
            delete toDel;
        }
        int top(){
            if(empty()){
                return -1;
            }
            return Top -> data;
        }
};



// queue using linked list
class node{
    public:
        int data;
        node* next;
        node(int x){
            data = x;
            next = NULL;
        }
};

class Queue{
    node* front;
    node* back;
    public :
        Queue(){
            front = NULL;
            back = NULL;
        }
        void push(int x){
            node* n = new node(x);
            if(empty()){
                front = n;
                back = n;
                return;
            }
            back -> next = n;
            back = back -> next;
        }
        void pop(){
            if(empty()){
                return;
            }
            node* toDel = front;
            front = front -> next;
            delete toDel;
        }
        int Front(){
            if(empty()){
                return -1;
            }
            return front -> data;
        }
        bool empty(){
            return front == NULL;
        }
};



    bool isValid(string s) {
        int n = s.size();
        stack<char> st;
        unordered_map<char,int> prec = {
            { '(' , 1  } , { ')' , -1 } ,
            { '{' , 2  } , { '}' , -2 } ,
            { '[' , 3  } , { ']' , -3 }
        };
        for(auto& brac : s){
            if(prec[brac] > 0){
                st.push(brac);
            }else{
                if(st.empty() || (prec[brac] + prec[st.top()])){
                    return 0;
                }else{
                    st.pop();
                }
            }
        }return st.empty();
    }



class Solution {
public:
    string reverseWords(string s) {
        int n = s.size();
        stack<string> st;
        for(int i = 0; i < n; ++i){
            char ch = s[i];
            if(ch == ' ')   continue;
            string word;
            for(;i < n && s[i] != ' '; ++i){
                word += s[i];
            }st.push(word);
        }
        s = "";
        while(!st.empty()){
            s += st.top();
            s += ' ';
            st.pop();
        }
        s.pop_back();
        return s;
    }
};



void insertAtBottom(stack<int> &st,int elm){
    if(st.empty()){
        st.push(elm);
        return;
    }
    int topElm = st.top();
    st.pop();
    insertAtBottom(st,elm);
    st.push(topElm);
}

void reverseStack(stack<int> &stack){
    if(stack.empty()){
        return;
    }
    int topElm = stack.top();
    stack.pop();
    reverseStack(stack);
    insertAtBottom(stack,topElm);
}



void sortedInsert(stack<int> &s,int num){
	if(s.empty() || s.top() < num){
		s.push(num);
		return;
	}
	int topElm = s.top();
	s.pop();
	sortedInsert(s,num);
	s.push(topElm);
}

void sortStack(stack<int> &s){
	if(s.empty()){
		return;
	}
	int num = s.top();
	s.pop();
	sortStack(s);
	sortedInsert(s,num);
}



class MinStack {
public:
vector<pair<int,int>> st;
    MinStack() {
        
    }
    void push(int val) {
        if(st.empty()) {
            pair<int,int> p = make_pair(val, val);
            st.push_back(p);
        }
        else{
            pair<int,int> p;
            p.first = val;
            p.second = min(val, st.back().second);
            st.push_back(p);
        }
    }
    void pop() {
        st.pop_back();
    }
    int top() {
        return st.back().first;
    }
    int getMin() {
        return st.back().second;
    }
};



int maxDepth(string s) {
    int n = s.size() ,maxi = 0;
    stack<char> st;
    for(auto& brac : s){
        if(brac == '('){
            st.push(brac);
            if(maxi < st.size()){
                maxi = st.size();
            }
        }else if(brac == ')'){
            st.pop();
        }
    }return maxi;
}



string removeOuterParentheses(string s) {
    int n = s.size();
    stack<char> st;
    string ans;
    for(auto& brac : s){
        if(brac == '('){
            if(!st.empty()){
                ans += brac;
            }
            st.push(brac);
        }else if(brac == ')'){
            st.pop();
            if(!st.empty()){
                ans += brac;
            }
        }
    }return ans;
}



bool findRedundantBrackets(string &s) {
    stack<char> st;
    int isRedundant = 1;
    for(auto& ch : s){
        if(ch == '(' || ch == '+' || ch == '-' || ch == '*' || ch == '/'){
            st.push(ch);
        }else if(ch == ')'){
            if(st.top() == '('){
                return 1;
            } else {
                while(st.top() != '('){
                    st.pop();
                }
                st.pop();
            }
        }
    }
    return 0;
}



int findMinimumCost(string s) {
    int n = s.size() ,a = 0 ,b = 0;
    if(n%2 != 0){
        return -1; 
    }
    stack<char> st;
    for(auto& brac : s){
        if(brac == '{'){
            st.push(brac);
        }else {
            if(brac == '}' && !st.empty() && st.top() == '{'){
                st.pop();
            }else{
                st.push(brac);
            }
        }
    }
    int sz = st.size();
    while(!st.empty()){
        if(st.top() == '{'){
            a++;
        }
        st.pop();
    }
    b = sz-a;
    return (a+1)/2 + (b+1)/2;
}



class MinStack {
    stack<long long> st;
    long long mini;
public:
    MinStack() {
        while (st.empty() == false) st.pop();
        mini = INT_MAX;
    }
    void push(int value) {
        long long val = (long long)value;
        if(st.empty()){
            mini = val;
            st.push(val);
        }else{
            if(val < mini){
                st.push(2*val*1LL - mini);
                mini = val;
            }else{
                st.push(val);
            }
        }
    }
    void pop() {
        if (st.empty()) return;
        long long el = st.top();
        st.pop();
        if (el < mini) {
          mini = 2 * mini - el;
        }
    }
    int top() {
        if (st.empty()) return -1;
        long long el = st.top();
        if (el < mini) return mini;
        return el;
    }
    int getMin() {
      return mini;
    }
};



int prec(char ch){
	if(ch == '^'){
		return 3;
	}
	else if(ch == '*' || ch == '/'){
		return 2;
	}
	else if(ch == '+' || ch == '-'){
		return 1;
	}
	else{
		return -1;
	}
}
string infixToPostfix(string exp){
	stack<char> st;
	string res = "";
	for(auto& ch : exp){
		if(	(ch >= '0' && ch <= '9') || 
			(ch >= 'a' && ch <= 'z') || 
			(ch >= 'A' && ch <= 'Z')
			){
			res += ch;
		}
		else if(ch == '('){
			st.push(ch);
		}
		else if(ch == ')'){
			while(!st.empty() && st.top() != '('){
				res += st.top();
				st.pop();
			}
			if(!st.empty()){
				st.pop();
			}
		}
		else{
			while(!st.empty() && prec(st.top()) >= prec(ch)){
				res += st.top();
				st.pop();
			}
			st.push(ch);
		}
	}
	while(!st.empty()){
		res += st.top();
		st.pop();
	}
	return res;
}



reverse(exp.begin(),exp.end());
string newExp = "";
for(auto& ch : exp){
    if(ch == '('){
        newExp += ')';
    }else if(ch == ')'){
        newExp += '(';
    }else{
        newExp += ch;
    }
}
string ans = infixToPostfix(newExp);
reverse(ans.begin(),ans.end());



double evaluatePrefix(string exprsn){
    stack<double> Stack;
    int n = exprsn.size();
    for (int j = n - 1; j >= 0; j--) {
        char ch = exprsn[j];
        if (isdigit(ch))
            Stack.push(ch - '0');
        else {
            double o1 = Stack.top();
            Stack.pop();
            double o2 = Stack.top();
            Stack.pop();
            switch (ch) {
            case '+':
                Stack.push(o1 + o2);
                break;
            case '-':
                Stack.push(o1 - o2);
                break;
            case '*':
                Stack.push(o1 * o2);
                break;
            case '/':
                Stack.push(o1 / o2);
                break;
            }
        }
    }
    return Stack.top();
}



int evaluatePostfix(string s){
    int n = s.size();
    stack<int> st;
    for(auto& ch : s){
        if(isdigit(ch)){
            st.push(ch - '0');
        }
        else{
            int op2 = st.top();
            st.pop();
            int op1 = st.top();
            st.pop();
            switch(ch){
                case '+':
                    st.push(op1 + op2);
                    break;
                case '-':
                    st.push(op1 - op2);
                    break;
                case '*':
                    st.push(op1 * op2);
                    break;
                case '/':
                    st.push(op1 / op2);
            }
        }
    }return st.top();
}



string postfixToInfix(string s) {
    stack<string> st;
    int n = s.size();
    for(auto& ch : s){
        if( (ch >= 'A' && ch <= 'Z') || 
            (ch >= 'a' && ch <= 'z')){
            st.push(string(1,ch));
        }else{
            string op2 = st.top();
            st.pop();
            string op1 = st.top();
            st.pop();
            string temp='('+op1+ch+op2+')';
            st.push(temp);
        }
    }
    return st.top();
} -> reverse + rest



string postfixToPrefix(string &s){
    stack<string> st;
    for(auto& ch : s){
        if(ch == '+' || ch == '-' || ch == '*' || ch == '/'){
            string op2 = st.top();
            st.pop();
            string op1 = st.top();
            st.pop();
            st.push(ch+op1+op2);
        }else{
            st.push(string(1,ch));
        }
    }
    return st.top();
} -> reverse + rest 



    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        vector<int> ans(n,-1);
        for(int i = 0; i < n; ++i){
            bool flag = 0;
            for(int j = 0; j < m; ++j){
                if(nums1[i] == nums2[j]){
                    flag = 1;
                }
                if(flag && nums1[i] < nums2[j]){
                    ans[i] = nums2[j];
                    break;
                }
            }
        }return ans;
    }

    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& v) {
        unordered_map<int,int>m;
        stack<int>st;
        for(int i=v.size()-1;i>=0;i--){
            while(!st.empty() && v[st.top()]<=v[i] ) st.pop();
            if(!st.empty()) m[v[i]]=v[st.top()]; else m[v[i]]=-1;
            st.push(i);
        }
        for(auto &x:nums1){
            x=m[x];
        }
        return nums1;
    }

vector<int> nextGreaterElement(vector<int>& arr, int n){
	vector<int> ans(n,-1);
	stack<int> st;
	st.push(arr[n-1]);
	for(int i = n-2; i >= 0; --i){
			if(arr[i] < st.top()){
				ans[i] = st.top();
			}
			else{
				while(!st.empty() && arr[i] >= st.top()){
					st.pop();
				}
				if(!st.empty())
					ans[i] = st.top();
			}
			st.push(arr[i]);
	}
	return ans;
}


    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<int> st;
        int n = nums.size();
        vector<int> ans(n,-1);
        int sz = 2*n;
        st.push(ans[(sz-1)%n]);
        for(int i = sz-2; i >= 0; --i){
            int idx = i%n;
            while(!st.empty() && nums[idx] >= st.top()){
                st.pop();
            }
            if(!st.empty()){
                ans[idx] = st.top();
            }
            st.push(nums[idx]);
        }
        return ans;
    }


void immediateSmaller(vector<int>& a){
	stack<int> st;
	st.push(-1);
	int n = a.size();
	for(int i = n-1; i >= 0; i--){
		int curr = a[i];
		if(a[i] > st.top()){
			a[i] = st.top();
		}
		else{
			a[i] = -1;
		}
		st.push(curr);
	}
}



vector<int> countGreater(vector<int>&arr, vector<int>&query) {
    int m = query.size();
    int n = arr.size();
    stack<int> st;
    vector<int> ans(m,-1);
    for(int i = 0; i < m; ++i){
        int cnt = 0;
        int idx = query[i];
        for(int j = idx+1; j < n; ++j){
            if(arr[j] > arr[idx]){
                cnt++;
            }
        }
        ans[i] = cnt;
    }
    return ans;
}

vector<int> countGreater(vector<int>&arr, vector<int>&query) {
    stack<int>st2;
    stack<int>st1;
    int count=0;
    int n = arr.size();
    vector<int>ans(n);
    for(int i = n-1; i >= 0; i--){
        count = 0;
        while(!st1.empty() ){
            if(arr[i] < st1.top()){
                count++;
            }
            st2.push(st1.top());
            st1.pop();
        }
        ans[i]=count;
        st1.push(arr[i]);
        while(!st2.empty()){
            st1.push(st2.top());
            st2.pop();
        }
   }
    vector<int>ok(query.size());
    for(int i=0;i<query.size();i++){
        ok[i]= ans[query[i]];
    }
    return ok;
}


    int trap(vector<int>& height) {
        int n = height.size();
        int maxL = height[0] ,maxR = height[n-1];
        vector<int> left(n,0) ,right(n,0);
        for(int i = 1; i < n; ++i){
            left[i] = maxL;
            right[n-1-i] = maxR;
            maxL = max(maxL,height[i]);
            maxR = max(maxR,height[n-1-i]);
        }
        int water = 0;
        for(int i = 1; i < n-1; ++i){
            water += max(0,min(left[i],right[i])-height[i]);
        }
        return water;
    }


    int trap(vector<int>& height) {
        int n = height.size() ,ans = 0;
        stack<int> st;
        for(int i = 0; i < n; ++i){
            while(!st.empty() && height[st.top()] < height[i]){
                int cur = st.top();
                st.pop();
                if(st.empty()){
                    break;
                }else{
                    int diff = i - st.top() - 1;
                    ans += diff * max(0,min(height[st.top()],height[i])-height[cur]);
                }
            }st.push(i);
        }return ans;
    }


    int trap(vector<int>& height) {
        int n = height.size() ,ans = 0;
        stack<int> st;
        for(int i = 0; i < n; ++i){
            while(!st.empty() && height[st.top()] < height[i]){
                int cur = st.top();
                st.pop();
                if(st.empty()){
                    break;
                }else{
                    int diff = i - st.top() - 1;
                    ans += diff * max(0,min(height[st.top()],height[i])-height[cur]);
                }
            }st.push(i);
        }return ans;
    }


    int trap(vector<int>& height) {
        
        int n = height.size();
        int maxi = height[0] ,idx = 0;
        for(int i = 1; i < n; ++i){
            if(maxi < height[i]){
                maxi = height[i];
                idx = i;
            }
        }

        int water = 0;
        int maxiL = height[0];
        for(int i = 1; i < idx; ++i){
            int level = height[i];
            int unit = maxiL-level;
            water += max(0,unit);
            maxiL = max(maxiL,level);
        }
        int maxiR = height[n-1];
        for(int i = n-2 ;i > idx; --i){
            int level = height[i];
            int unit = maxiR-height[i];
            water = max(0,unit);
            maxiR = max(maxiR,level);
        }
        return water;
    }


    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size() ,ans = 0;
        for(int i = 0; i < n; ++i){
            int minH = 1e9;
            for(int j = i; j < n; ++j){
                minH = min(minH,heights[j]);
                ans = max(ans,minH*(j-i+1));
            }
        }return ans;
    }

    int largestRectangleArea(vector<int>& heights) { 
        int n = heights.size();
        stack<int> st;
        int leftSmall[n];
        int rightSmall[n]; 
        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            if(st.empty()) leftSmall[i] = -1;
            else leftSmall[i] = st.top();
            st.push(i);
        }
        while (!st.empty()) {
            st.pop();
        }
        for (int i = n-1; i >= 0; i--) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            if (st.empty()) rightSmall[i] = n;
            else  rightSmall[i] = st.top();
            st.push(i);
        }
        int maxA = 0;
        for (int i = 0; i < n; i++) {
            maxA = max(maxA, heights[i]*(rightSmall[i]-leftSmall[i]-1));
        }
        return maxA; 
    }


    int largestRectangleArea(vector<int>& heights) {
        heights.push_back(0);
        int n = heights.size();
        stack<int> s;
        int ans = 0 ,i = 0;
        while(i < n){
            while(!s.empty() && heights[i] < heights[s.top()]){
                int top = s.top();
                int h = heights[top];
                s.pop();
                if(s.empty()){
                    ans = max(ans,h*i);
                }else{
                    int len = i - s.top() - 1;
                    ans = max(ans,h*len);
                }
            }s.push(i);
            ++i;
        }
        return ans;
    }

    O(n3)

 

multiset<int,greater<int>> s;
for(int i = 0; i < k; ++i){
    s.insert(a[i]);
}ans.push_back(*s.begin());
for(int i = k; i < n; ++i){
    s.erase(s.lower_bound(a[i-k]));
    s.insert(a[i]);
    ans.push_back(*s.begin());
}

deque<int> dq;
for(int i = 0; i < k; ++i){
    while(!dq.empty() && a[dq.back()] < a[i]){
        dq.pop();
    }dq.push_back(i);
}ans.push_back(nums[q.front()]);
for(int i = k; i < n; ++i){
    if(q.front() == i-k){
        q.pop_front();
    }while(!dq.empty() && a[dq.back()] < a[i]){
        dq.pop();
    }dq.push_back(i);
    ans.push_back(nums[q.front()]);
}

int largestRectangleArea(vector<int>& heights) {
    int n = heights.size() ,ans = 0;
    for(int i = 0; i < n; ++i){
        int minH = 1e9;
        for(int j = i; j < n; ++j){
            minH = min(minH,heights[j]);
            ans = max(ans,minH*(j-i+1));
        }
    }return ans;
}

int largestRectangleArea(vector<int>& heights) {
    heights.push_back(0);
    int n = heights.size();
    stack<int> s;
    int ans = 0;
    int i = 0;
    while(i < n){
        while(!s.empty() && heights[i] < heights[s.top()]){
            int top = s.top();
            int h = heights[top];
            s.pop();
            if(s.empty()){
                ans = max(ans,h*i);
            }else{
                int len = i - s.top() - 1;
                ans = max(ans,h*len);
            }
        }s.push(i);
        ++i;
    }
    return ans;
}

int trap(vector<int>& height) {
    int n = height.size();
    int maxi = height[0] ,idx = 0;
    for(int i = 1; i < n; ++i){
        if(maxi < height[i]){
            maxi = height[i];
            idx = i;
        }
    }int water = 0;
    int maxiL = height[0];
    for(int i = 1; i < idx; ++i){
        int level = height[i];
        int unit = maxiL-level;
        if(unit > 0){
            water +=  unit;
        }maxiL = max(maxiL,level);
    }int maxiR = height[n-1];
    for(int i = n-2 ;i > idx; --i){
        int level = height[i];
        int unit = maxiR-height[i];
        if(unit > 0){
            water += unit;
        }maxiR = max(maxiR,level);
    }return water;
}

int trap(vector<int>& height) {
    int n = height.size() ,ans = 0;
    stack<int> st;
    for(int i = 0; i < n; ++i){
        while(!st.empty() && height[st.top()] < height[i]){
            int cur = st.top();
            st.pop();
            if(st.empty()){
                break;
            }else{
                int diff = i - st.top() - 1;
                ans += diff * max(0,min(height[st.top()],height[i])-height[cur]);
            }
        }st.push(i);
    }return ans;
}

for(int i = 0; i < n; ++i){
    int days = 0;
    for(int j = i; j >= 0; --j){
        if(prices[i] >= prices[j]){
            days++;
        }else{
            break;
        }
    }
}

vector<int> stockSpan(vector<int> prices){
    vector<int> ans;
    stack<pair<int,int>> s;
    for(price : prices){
        int days = 1;
        while(!s.empty() && st.top().first <= price){
            days += s.top().second
            s.pop();
        }s.push({price,days});
        ans.push_back(days);
    }return ans;
}

unordered_map<char,int>sym={{'[',-3},{']',3},{'{',-2},{'}',2},{'(',-1},{')',1}};
string isBalanced(string s){
    stack<char>st;
    for(char brac:s){
        if(sym[brac]<0) st.push(brac);
        else{
            char top = st.top();
            st.pop();
            if(sym[top]+sym[brac]!=0 || st.empty()) return "NO";
        }
    }if(st.empty()) return "YES";
    return "NO";
}

vector<int> NGE(vector<int>&v){
    vector<int>nge(v.size());
    stack<int>st;
    for(int i=0 ;i<v.size();i++){
        while(!st.empty() && v[i]>v[st.top()]){
            nge[st.top()] = i; st.pop();
        }st.push(i);
    }while(!st.empty()){
        nge[st.top]=-1;
        st.pop();
    }return nge;
}int n; cin>>n; vector<int>v(n);
for(auto &val:v) cin>>val;
vector<int>nge = NGE(v);
for(int i=0;i<n;i++) cout<<v[i]<<" "<<((nge[i]==-1)?-1:v[nge[i]])<<endl;

bool redundantParentheses(string s){
    stack<char> st;
    bool ans = 0;
    int n = s.size();
    for(int i = 0; i < n; ++i){
        if(s[i] == 'op'){
            st.push(s[i]);
        }else if(s[i] == 'open'){
            st.push(s[i]);
        }else if(s[i] == 'close'){
            if(st.top() == 'open'){
                ans = true;
                break;
            }while(st.top() == 'op'){
                st.pop();
            }st.pop();
        }
    }return ans;
}
