vector<vector<int>> dp;
bool f(vector<int>& arr,int n,int sum){
    if(n == 0)  return sum == 0;
    if(dp[n][sum] != -1)    return dp[n][sum];
    if(sum < arr[n-1])  return dp[n][sum] = f(arr,n-1,sum);
    return dp[n][sum] = f(arr,n-1,sum) || f(arr,n-1,sum-arr[n-1]);
}


    bool isSubsetSum(vector<int>arr, int sum){
        int n = arr.size();
        vector<vector<bool>> dp(n+1, vector<bool> (sum+1, 0));
        dp[0][0] = 1;
        for(int i = 1; i <= n; ++i) {
            for(int j = 0; j <= sum; ++j) {
                if(j < arr[i-1]) {
                    dp[i][j] = dp[i-1][j];
                    continue;
                }
                dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
            }
        }
        return dp[n][sum];
    }


    bool isSubsetSum(vector<int>arr, int sum){
        int n = arr.size();
        vector<bool> dp(sum+1, 0);
        dp[0] = 1;
        for(int i = 1; i <= n; ++i) {
            for(int j = sum; j >= arr[i-1]; --j) 
                dp[j] = dp[j] || dp[j-arr[i-1]];
        }
        return dp[sum];
    }