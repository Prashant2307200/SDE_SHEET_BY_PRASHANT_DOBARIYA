    vector<vector<int>> dp;
    int f(int i, int j, int arr[]) {
        if(i == j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int mini = INT_MAX;
        for(int k = i; k < j; ++k) {
            int left = f(i, k, arr);
            int right = f(k+1, j, arr);
            int curr = arr[i-1] * arr[k] * arr[j];
            mini = min(mini, left + right + curr);
        }
        return dp[i][j] = mini;
    }
public:
    int matrixMultiplication(int N, int arr[]) {
        dp = vector<vector<int>> (N, vector<int> (N, -1));
        return f(1, N-1, arr);
    }
    
    
    int matrixMultiplication(int N, int arr[]) {
        vector<vector<int>> dp(N, vector<int> (N, INT_MAX));
        for(int i = 1; i < N; ++i) dp[i][i] = 0;
        for(int i = N-1; i > 0; --i) {
            for(int j = i + 1; j < N; ++j) { 
                for(int k = i; k < j; ++k) {
                    int left = dp[i][k];
                    int right = dp[k+1][j];
                    int curr = arr[i-1] * arr[k] * arr[j];
                    dp[i][j] = min(dp[i][j], left + right + curr);
                } 
            }
        }
        return dp[1][N-1];
    }