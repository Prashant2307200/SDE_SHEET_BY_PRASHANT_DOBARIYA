    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size(), m = text2.size();
        vector<vector<int>> dp(n+1, vector<int> (m+1, 0));
        for(int i = 1; i <= n; ++i) {
            for(int j = 1; j <= m; ++j) {
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[n][m];
    }


    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size(), m = text2.size();
        vector<int> dp(m+1, 0);
        for(int i = 1; i <= n; ++i) {
            int prev0 = 0, prev1;
            for(int j = 1; j <= m; ++j) {
                prev1 = dp[j];
                if(text1[i-1] == text2[j-1])
                    dp[j] = 1 + prev0;
                else
                    dp[j] = max(dp[j], dp[j-1]);
                prev0 = prev1;
            }
        }
        return dp[m];
    }