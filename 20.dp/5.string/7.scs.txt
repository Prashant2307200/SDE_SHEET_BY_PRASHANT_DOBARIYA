class Solution {
    vector<vector<int>> dp;
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size(), m = text2.size();
        dp = vector<vector<int>> (n+1, vector<int> (m+1, 0));
        for(int i = 1; i <= n; ++i) {
            for(int j = 1; j <= m; ++j) {
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[n][m];
    }
    void formSCS(string& ans, int len, string& s1, string& s2) {
        int n = s1.size(), m = s2.size();
        int i = n, j = m, k = len-1;
        while(i > 0 || j > 0) {
            if(i > 0 && j > 0) {
                if(s1[i-1] == s2[j-1]) ans[k] = s1[i-1], --i, --j;
                else if(dp[i-1][j] > dp[i][j-1]) ans[k] = s1[--i];
                else ans[k] = s2[--j];
            }
            else if(i > 0) ans[k] = s1[--i];
            else if(j > 0) ans[k] = s2[--j];
            k--;
        }
    }
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int lcs = longestCommonSubsequence(str1, str2);
        int n = str1.size(), m = str2.size();
        int len = n + m - lcs;
        string ans(len, '$'); 
        formSCS(ans, len, str1, str2);
        return ans;
    }
};