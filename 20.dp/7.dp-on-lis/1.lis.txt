class Solution {
    vector<vector<int>> dp; 
    int f(int i, int p, int n, vector<int>& nums) {
        if(i == n)
            return 0;
        if(dp[i][p+1] != -1)
            return dp[i][p+1];
        int exc = f(i+1, p, n, nums);
        if(p != -1 && nums[p] >= nums[i])
            return dp[i][p+1] = exc;
        int inc = 1 + f(i+1, i, n, nums);
        return dp[i][p+1] = max(inc, exc);
    }
public:
    int lengthOfLIS(vector<int>& nums) {
        int i = 0, p = -1, n = nums.size();
        dp = vector<vector<int>> (n+1, vector<int> (n+1, -1));
        return f(i, p, n, nums);
    }
};


    int lengthOfLIS(vector<int>& nums) {
        int i = 0, p = -1, n = nums.size();
        vector<int> dp(n+1, 0);
        for(int i = n-1; i >= 0; --i) {
            for(int j = i-1; j >= p; --j) 
                dp[j+1] = max(dp[j+1], ((j == -1) || nums[j] < nums[i]) ? dp[i+1]+1 : 0);
        }
        return dp[p+1];
    }


    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, 1);
        int maxi = 1;
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < i; ++j)
                dp[i] = max(dp[i], nums[j] < nums[i] ? dp[j] + 1 : 1);
            maxi = max(maxi, dp[i]);
        }
        return maxi;
    }


    int lengthOfLIS(vector<int>& nums) {
        vector<int> temp;
        temp.push_back(nums[0]);
        int n = nums.size();
        for(int i = 1; i < n; ++i) {
            if(temp.back() < nums[i]) 
                temp.push_back(nums[i]);
            else 
                temp[lower_bound(temp.begin(), temp.end(), nums[i]) - temp.begin()] = nums[i];
        }
        return temp.size();
    }


    vector<int> hsh;
    vector<int> lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        int maxi = 1, lstIdx = 0;
        vector<int> dp(n, 1);
        for(int i = 0; i < n; ++i) {
            hsh[i] = i;
            for(int j = 0; j < i; ++j) {
                if(nums[j] < nums[i] && 1 + dp[j] > dp[i]) {
                    dp[i] = 1 + dp[j];
                    hsh[i] = j;
                } 
            }
            if(dp[i] > maxi) {
                maxi = dp[i];
                lstIdx = i;
            }
        }
        vector<int> lis(maxi);
        lis[0] = nums[lstIdx];
        int i = 1;
        while(hsh[lstIdx] != lstIdx) {
            lstIdx = hsh[lstIdx];
            lis[i++] = nums[lstIdx];
        }
        reverse(lis.begin(), lis.end());
        return lis;
    }
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        hsh = vector<int> (n);
        return lengthOfLIS(arr);
    }


    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size(), maxi = 1;
        vector<int> dp(n, 1), cnt(n, 1);
        for(int i = 1; i < n; ++i) {
            for(int j = 0; j < i; ++j) {
                if(nums[j] < nums[i] && 1 + dp[j] > dp[i]) {
                    dp[i] = 1 + dp[j];
                    cnt[i] = cnt[j];
                }
                else if(nums[j] < nums[i] && 1 + dp[j] == dp[i]) 
                    cnt[i] += cnt[j];
            }
            maxi = max(maxi, dp[i]);
        }
        int c = 0;
        for(int i = 0; i < n; ++i) {
            if(dp[i] == maxi)
                c += cnt[i];
        }
        return c;
    }