class Solution {
    static bool myCmp(string& s1, string& s2) {
        return s1.size() < s2.size();
    }
    bool isStrChain(string& s1, string& s2) {
        int n = s1.size(), m = s2.size();
        if(n != m + 1)
            return false;
        int i = 0, j = 0;
        while(i < n) {
            if(j < m && s1[i] == s2[j])
                j++;
            i++;
        }
        return j == m;
    }
public:
    int longestStrChain(vector<string>& words) {
        sort(words.begin(), words.end(), myCmp);
        int n = words.size(), maxi = 1;
        vector<int> dp(n, 1);
        for(int i = 1; i < n; ++i) {
            for(int j = 0; j < i; ++j) {
                if(isStrChain(words[i], words[j]) && dp[i] < dp[j] + 1) 
                    dp[i] = dp[j] + 1;
            }
            maxi = max(maxi, dp[i]);
        }
        return maxi;
    }
};