    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        bool buy = 1;
        vector<vector<int>> dp = vector<vector<int>> (n+1, vector<int> (2, 0));
        for(int i = n - 1; i >= 0; --i) {
            for(int j = 0; j <= buy; ++j) {
                int profit = 0;
                if(j) {
                    int inc = -prices[i] + dp[i+1][!j];
                    int exc = dp[i+1][j];
                    profit = max(inc, exc);
                }
                else {
                    int inc = prices[i] + (i >= n-1 ? 0 : dp[i+2][!j]);
                    int exc = dp[i+1][j];
                    profit = max(inc, exc);
                }
                dp[i][j] = profit;
            }
        }
        return dp[0][buy];
    }


    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        bool buy = 1;
        vector<vector<int>> dp = vector<vector<int>> (n+1, vector<int> (2, 0));
        for(int i = n - 1; i >= 0; --i) { 
            dp[i][1] = max(dp[i+1][1], -prices[i] + dp[i+1][0]);
            dp[i][0] = max(dp[i+1][0], prices[i] + (i >= n-1 ? 0 : dp[i+2][1]));
        }
        return dp[0][buy];
    }


    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        bool buy = 1;
        vector<int> dp0, dp1, dp2;
        dp0 = dp1 = dp2 = vector<int> (2, 0);
        for(int i = n - 1; i >= 0; --i) { 
            dp2[1] = max(dp1[1], -prices[i] + dp1[0]);
            dp2[0] = max(dp1[0], prices[i] + (i >= n-1 ? 0 : dp0[1]));
            dp0 = dp1, dp1 = dp2;
        }
        return dp1[buy];
    }