class Solution {
    vector<vector<vector<int>>> dp;
    vector<int> dirs = { -1, 0, 1 }; 
    int f(int i, int j1, int j2, int m, int n, vector<vector<int>>& grid) {
        if(i >= m) return 0;
        if(j1 < 0 || j1 >= n) return 0;
        if(j2 < 0 || j2 >= n) return 0;
        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];
        int maxi = 0;
        for(auto& dir1: dirs) {
            for(auto& dir2: dirs) {
                int rop = f(i+1, j1+dir1, j2+dir2, m, n, grid);
                if(j1 == j2) 
                    maxi = max(maxi, grid[i][j1] + rop);
                else 
                    maxi = max(maxi, grid[i][j1] + grid[i][j2] + rop);
            }
        }
        return dp[i][j1][j2] = maxi;
    }
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        int i = 0, j1 = 0, j2 = n-1;
        dp = vector<vector<vector<int>>> (m+1, vector<vector<int>> (n+1, vector<int> (n+1, -1)));
        return f(i, j1, j2, m, n, grid);
    }
};


    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(); 
        vector<vector<vector<int>>> dp(m+1, vector<vector<int>> (n+1, vector<int> (n+1, 0)));
        for(int i = m-1; i >= 0; --i) {
            for(int j1 = 0; j1 < n; ++j1) {
                for(int j2 = 0; j2 < n; ++j2) {
                    int dir1_mini = max(0, j1-1);
                    int dir1_maxi = min(n-1, j1+1);
                    for(int k1 = dir1_mini; k1 <= dir1_maxi; ++k1) {
                        int dir2_mini = max(0, j2-1);
                        int dir2_maxi = min(n-1, j2+1);
                        for(int k2 = dir2_mini; k2 <= dir2_maxi; ++k2) {
                            int rop = dp[i+1][k1][k2];
                            if(j1 == j2)
                                dp[i][j1][j2] = max(dp[i][j1][j2], grid[i][j1] + rop);
                            else
                                dp[i][j1][j2] = max(dp[i][j1][j2], grid[i][j1] + grid[i][j2] + rop);
                        }
                    }
                }
            }
        }
        return dp[0][0][n-1];
    }


    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(); 
        vector<vector<int>> dp0(n+1, vector<int> (n+1, 0)), dp1(n+1, vector<int> (n+1, 0));
        for(int i = m-1; i >= 0; --i) {
            for(int j1 = 0; j1 < n; ++j1) {
                for(int j2 = 0; j2 < n; ++j2) {
                    int dir1_mini = max(0, j1-1);
                    int dir1_maxi = min(n-1, j1+1);
                    for(int k1 = dir1_mini; k1 <= dir1_maxi; ++k1) {
                        int dir2_mini = max(0, j2-1);
                        int dir2_maxi = min(n-1, j2+1);
                        for(int k2 = dir2_mini; k2 <= dir2_maxi; ++k2) {
                            int rop = dp0[k1][k2];
                            if(j1 == j2)
                                dp1[j1][j2] = max(dp1[j1][j2], grid[i][j1] + rop);
                            else
                                dp1[j1][j2] = max(dp1[j1][j2], grid[i][j1] + grid[i][j2] + rop);
                        }
                    }
                }
            }
            dp0 = dp1;
        }
        return dp0[0][n-1];
    }