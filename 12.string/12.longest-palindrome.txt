class Solution {
    bool isPalindrome(string s){
        string rev = s;
        reverse(s.begin(), s.end());
        return rev == s;
    }
public:
    string longestPalindrome(string s) {
        int n = s.size(), len = 0;
        string ans;
        for(int i = 0; i < n; ++i){
            string substr;
            for(int j = i; j < n; ++j){
                substr += s[j];
                if(!isPalindrome(substr))   continue;
                if(j-i+1 <= len)    continue;
                ans = substr;
                len = j-i+1;
            }
        }
        return ans;
    }
};

class Solution {
    bool isPalindrome(string s){
        int n = s.size(), i = 0;
        while(i < n-1-i){
            if(s[i] != s[n-1-i])
                return 0;
            ++i;
        }
        return 1;
    }
public:
    string longestPalindrome(string s) {
        int n = s.size() ,maxLen = 0;
        string ans;
        vector<string> substrs;
        for(int i = 0; i < n; ++i){
            string substr;
            for(int j = i; j < n; ++j){
                substr += s[j];
                substrs.push_back(substr);
            }
        }
        for(auto& substr : substrs){
            if(isPalindrome(substr)){
                int sz = substr.size();
                if(maxLen < sz){
                    ans = substr;
                    maxLen = substr.size();
                }
            }
        }
        return ans;
    }
};

string longestPalindrome(string s) {
    int n = s.size() ,len = 0 ,st = 0;
    vector<vector<bool>> dp(n,vector<bool> (n));
    for(int gap = 0; gap < n; ++gap){
        for(int i = 0 ,j = gap; j < n; ++j ,++i){
            if(gap == 0 || gap == 1 || dp[i+1][j-1]){
                dp[i][j] = !(s[i]-s[j]);
            }
            if(dp[i][j]){
                st = i;
                len = gap + 1;
            }
        }
    }
    return s.substr(st,len);
}

class Solution {
    void expand(string &s , int left ,int right){
        int n = s.size();
        while(left >= 0 &&  right < n){
            if(s[left] != s[right])
                break;
            left--,right++;
        }
        int len = right - left - 1;
        int maxLen = ans.size();
        if(maxLen < len )
            ans = s.substr(left + 1 ,len);
    }
public:
    string ans = "";
    string longestPalindrome(string s) {
        for(int i = 0 ; i < s.size() ; i++){
            expand(s , i , i);
            expand(s , i , i+1);
        }
        return ans;
    }
};