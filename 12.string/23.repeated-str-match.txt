class Solution {

    void findLps(string needle,vector<int>& lps){
        int n = needle.size();
        int pre = 0 ,suf = 1;
        while(suf < n){
            if(needle[pre] == needle[suf]){
                lps[suf++] = ++pre;
            }else{
                if(!pre){
                    lps[suf++] = 0;
                }else{
                    pre = lps[--pre];
                }
            }
        }return;
    }

    bool KMP_MATCH(string haystack,string needle){
        int n = haystack.size() ,m = needle.size();
        vector<int> lps(m,0);
        findLps(needle,lps);
        int fst = 0 ,snd = 0;
        while(fst < n && snd < m){
            if(haystack[fst] == haystack[snd]){
                fst++;
                snd++;
                if(snd == m){
                    return 1;
                }
            }else{
                if(!snd){
                    fst++;
                }else{
                    snd = lps[snd-1];
                }
            }
        }return 0;
    }
public:
    int repeatedStringMatch(string a, string b) {
        
        if(a == b){
            return 1;
        }

        int rept = 1;
        string temp = a;
        int m = b.size();
        while(temp.size() < m){
            temp += a;
            rept++;
        }if(KMP_MATCH(temp,b) == 1){
            return rept;
        }else if(KMP_MATCH(temp+a,b) == 1){
            return rept+1;
        }else{
            return -1;
        }
    }
};