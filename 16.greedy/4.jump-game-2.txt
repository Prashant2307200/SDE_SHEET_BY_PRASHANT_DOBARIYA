class Solution {
    int f(vector<int>& nums, int i, int jumps, int n){
        if(i >= n-1)
            return jumps;
        int mini = 1e8; 
        for(int j = 1; j <= nums[i]; ++j){
            int rop = f(nums, i+j, jumps + 1, n);
            mini = min(mini, rop);
        }
        return mini;
    }
public:
    int jump(vector<int>& nums) {
        return f(nums, 0, 0, nums.size());
    }
};

class Solution {
    vector<vector<int>> dp;
    int f(vector<int>& nums, int i, int j, int n){
        if(i >= n-1)
            return j;
        if(dp[i][j] != -1) 
            return dp[i][j];
        int mini = 1e8; 
        for(int jump = 1; jump <= nums[i]; ++jump){
            int rop = f(nums, i+jump, j + 1, n);
            mini = min(mini, rop);
        }
        return dp[i][j] = mini;
    }
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        dp = vector<vector<int>> (n+1, vector<int> (n+1, -1));
        return f(nums, 0, 0, n);
    }
};


    int jump(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp = vector<vector<int>> (n, vector<int> (n+1, 1e8));
        for(int j = 0; j <= n; ++j)
            dp[n-1][j] = j;
        for(int i = n-2; i >= 0; --i) {
            for(int j = 0; j < n; ++j) {
                for(int jump = 1; jump <= nums[i] && i+jump < n; ++jump) 
                    dp[i][j] = min(dp[i][j], dp[i + jump][j + 1]);
            }
        }
        return dp[0][0];
    }

class Solution {
    int f(vector<int>& nums, int i, int n){
        if(i >= n-1)
            return 0;
        int mini = 1e8;
        int jumps = nums[i];
        for(int j = 1; j <= jumps; ++j) {
            int rop = f(nums, i+j, n);
            mini = min(mini, rop);
        }
        return mini+1;
    }
public: 
    int jump(vector<int>& nums) {
        return f(nums, 0, nums.size());
    }
};
          
    int jump(vector<int>& nums) {
        int n = nums.size();
        if(n <= 1)
            return 0;
        vector<int> dp(n-1, 1e8);  
        for(int i = n-2; i >= 0; --i) { 
            for(int j = 1; j <= nums[i]; ++j) 
                dp[i] = min(dp[i], 1 + (i+j >= n-1 ? 0:dp[i+j]));
        }
        return dp[0]; 
    }
    

int jump(vector<int>& nums) {
    int n = nums.size(), l ,r ,jumps;
    l = r = jumps = 0;
    while(r < n-1) {
        int farthest = 0;
        for(int i = l; i <= r; ++i) 
            farthest = max(farthest, nums[i]+i);
        l = r+1;
        r = farthest;
        jumps++;
    }
    return jumps;
}