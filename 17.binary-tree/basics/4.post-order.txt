class Solution {
    void helper(TreeNode* root,vector<int>& ans){
        if(root == NULL)    return;
        helper(root->left, ans);
        helper(root->right, ans);
        ans.push_back(root -> val);
    }
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        helper(root,ans);
        return ans;
    }
};


    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> postOrder;
        if(!root)
            return postOrder;
        stack<TreeNode*> st1,st2;
        st1.push(root);
        while(!st1.empty()){
            TreeNode* node = st1.top();
            st1.pop();
            if(node -> left){
                st1.push(node->left);
            }
            if(node -> right){
                st1.push(node->right);
            }
            st2.push(node);
        }
        while(!st2.empty()){
            postOrder.push_back(st2.top()->val);
            st2.pop();
        }
        return postOrder;
    }

    a c g f b e d
    d e b f g c a


    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(!root)
            return ans;
        stack<TreeNode*> st;
        TreeNode* curr = root;
        while(curr || !st.empty()){
            if(curr){
                st.push(curr);
                curr = curr->left;
            } else {
                TreeNode* temp = st.top()->right;
                if(temp == NULL) { 
                    temp = st.top();
                    st.pop();
                    ans.push_back(temp->val);
                    while(!st.empty() && temp == st.top()->right){
                        temp = st.top();
                        st.pop();
                        ans.push_back(temp->val);
                    }
                }
                else {
                    curr = temp;
                }
            }
        }
        return ans;
    }
