int numberOfSubarrays(vector<int>& nums, int k) {
    unordered_map<int,int> mp;
    int n = nums.size() ,odd = 0 ,cnt = 0;
    mp[odd]++;
    for(int i = 0; i < n; ++i){
        odd += nums[i]%2;
        cnt += mp[odd - k];
        mp[odd]++;
    }
    return cnt;
}

class Solution {
    int helper(vector<int>& nums,int k){
        int n = nums.size() ,cnt = 0 ,odd = 0 ,j = 0;
        for(int i = 0; i < n; ++i){
            odd += nums[i]&1;
            while(odd > k)  odd -= nums[j++]&1;
            cnt += i - j + 1;
        }return cnt;
    }
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        return helper(nums,k) - helper(nums,k-1);
    }
};