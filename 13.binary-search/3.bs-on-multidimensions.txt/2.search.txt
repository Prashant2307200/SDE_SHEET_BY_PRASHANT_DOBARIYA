int n = matrix.size() ,m = matrix[0].size();
for(int i = 0; i < n; ++i){
    for(int j = 0; j < m; ++j){
        if(matrix[i][j] == target)
            return 1;
    }
}return 0;

bool searchMatrix(vector<vector<int>>& matrix, int target) {    
    int n = matrix.size() ,m = matrix[0].size();
    int lowy = 0 ,highy = n-1;
    int lowx = 0 ,highx = m-1;
    while(lowy <= highy){
        int midy = (lowy + highy)/2;
        if(matrix[midy][0] <= target && target <= matrix[midy][m-1]){
            while(lowx <= highx){
                int midx = (lowx+highx)/2;
                if(matrix[midy][midx] == target)
                    return 1;
                else if(matrix[midy][midx] > target)
                    highx = midx-1;
                else
                    lowx = midx+1;
            }
            return 0;
        }
        else if(matrix[midy][0] > target)
            highy = midy-1;
        else
            lowy = midy+1;
    }
    return 0;
}

11 - 2,3  11/3 11%3 11/4 11%4
bool searchMatrix(vector<vector<int>>& matrix, int target) {
    int low = 0, m = matrix.size(), n = matrix[0].size();
    int high = m*n - 1;
    while(low <= high) {
        int mid = (low + high)/2;
        if(target == matrix[mid/n][mid%n])
            return 1;
        else if(target > matrix[mid%m][mid/m])
            low = mid + 1;
        else
            high = mid - 1;
    }
    return -1;
}

bool searchMatrix(vector<vector<int>>& matrix, int target) {
    int n = matrix.size() ,m = matrix[0].size();
    int row = 0 ,col = m-1;
    while(row < n && col >= 0){
        if(matrix[row][col] == target)
            return 1;
        else if(matrix[row][col] > target)
            col--;
        else
            row++;
    }
    return 0;
}