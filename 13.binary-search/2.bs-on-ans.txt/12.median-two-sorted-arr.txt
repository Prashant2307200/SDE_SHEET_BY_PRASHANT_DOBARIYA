double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int i =  0 ,j = 0; 
    int n = nums1.size() ,m = nums2. size() ,k = 0;
    vector<int> nums(n+m);
    while(i < n || j < m){
        if(i < n && j < m){
            if(nums1[i] < nums2[j])
                nums[k++] = nums1[i++];
            else
                nums[k++] = nums2[j++];
        }
        else if(i < n)
            nums[k++] = nums1[i++];
        else if(j < m)
            nums[k++] = nums2[j++];
    }
    if(k%2 == 1)
        return nums[k/2];
    else
        return (nums[k/2] + nums[k/2 - 1])/2.0;
}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int i =  0 ,j = 0;
    int n = nums1.size() ,m = nums2. size() ,k = 0;
    int idx1elm = -1 ,idx2elm = -1;
    int idx2 = (n+m)/2;
    int idx1 = idx2-1;
    while(i < n || j < m){
        if(i < n && j < m){
            if(nums1[i] < nums2[j]){
                if(k == idx1)  idx1elm = nums1[i];
                if(k == idx2)  idx2elm = nums1[i];
                i++; 
            }
            else{
                if(k == idx1)  idx1elm = nums2[j];
                if(k == idx2)  idx2elm = nums2[j];
                j++;
            }
        }
        else if(i < n){
            if(k == idx1)  idx1elm = nums1[i];
            if(k == idx2)  idx2elm = nums1[i];
            i++;
        }
        else if(j < m){
            if(k == idx1)  idx1elm = nums2[j];
            if(k == idx2)  idx2elm = nums2[j];
            j++;
        }
        k++;
    }
    if(k%2 == 1)
        return idx2elm;
    else
        return (idx1elm + idx2elm)/2.0;
}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int n1 = nums1.size(), n2 = nums2.size();
    int n = n1 + n2 + 1;
    if(n1 > n2) 
        return findMedianSortedArrays(nums2,nums1);
    int low = 0 ,high = n1;
    while(low <= high){
        int P1 = (low + high)/2;
        int P2 = n/2 - P1;
        int x1 = P1 == 0  ? INT_MIN : nums1[P1-1];
        int x2 = P2 == 0  ? INT_MIN : nums2[P2-1];
        int x3 = P1 == n1 ? INT_MAX : nums1[P1];
        int x4 = P2 == n2 ? INT_MAX : nums2[P2];
        if(x1 <= x4 && x2 <= x3)
            return (n1+n2)&1 ? max(x1,x2) : (max(x1,x2) + min(x3,x4))/2.0;
        else if(x1 > x4)
            high = P1 - 1;
        else
            low = P1 + 1;
    }
    return -1;
}