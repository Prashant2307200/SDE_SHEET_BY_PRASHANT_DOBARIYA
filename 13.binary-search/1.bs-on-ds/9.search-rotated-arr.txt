class Solution {
    int search(vector<int>& nums,int s, int e, int target) {
        while(s <= e) {
            int mid = s+e >>1;
            if(nums[mid] == target)
                return mid;
            else if(nums[mid] > target)
                e = mid-1;
            else 
                s = mid+1;
        }
        return -1;
    }
    int findMin(vector<int>& nums) {
        int n = nums.size();
        int s = 0, e = n-1;
        while(s <= e) {
            int mid = (s+e)>>1;
            if(nums[0] > nums[mid])
                e = mid-1;
            else
                s = mid+1;
        }
        return s == n ? 0 : s;
    }
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int pi = findMin(nums);
        if(pi == 0)
            return search(nums, 0, n-1, target);
        if(nums[0] <= target)   
            return search(nums, 0, pi-1, target);
        return search(nums, pi, n-1, target);
    }
}; 

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int s = 0, e = n-1;
        while(s <= e) {
            int mid = (s+e)>>1;
            int num = nums[mid];
            if(num == target)
                return mid;
            else if(nums[s] <= num) {
                if(nums[s] <= target && target <= num)
                    e = mid-1;
                else
                    s = mid+1;
            }
            else {
                if(num <= target && target <= nums[e])
                    s = mid+1;
                else
                    e = mid-1;
            }
        }
        return -1;
    }
};