int multiply(int a, int b) {
    int result = 0;
    while (b) { 
        if (b & 1) 
            result += a;
        a <<= 1; 
        b >>= 1; 
    }
    return result;
} 

double myPow(double x, int n) {
    double ans = 1;
    long long pow = n;
    if(pow < 0) pow = -pow;
    while(pow){
        if(pow&1)
            ans *= x;
        x *= x;
        pow >>= 1;
    }
    return n < 0? 1/ans : ans;
}

int divide(int dividend, int divisor) {
    if (divisor == 1)
        return dividend;
    if (divisor == -1) 
        return dividend == INT_MIN ? INT_MAX : -dividend;
    int sign = (dividend > 0) ^ (divisor > 0) ? -1 : 1;
    long long dvd = abs((long long)dividend);
    long long dvs = abs((long long)divisor);
    long long res = 0;
    while (dvd >= dvs) {
        long long tempDvs = dvs, multiple = 1;
        while (dvd >= (tempDvs << 1)) {
            tempDvs <<= 1;
            multiple <<= 1;
        }
        dvd -= tempDvs;
        res += multiple;
    }
    res = sign * res;
    return res > INT_MAX ? INT_MAX : res < INT_MIN ? INT_MIN : (int)res;
}    

