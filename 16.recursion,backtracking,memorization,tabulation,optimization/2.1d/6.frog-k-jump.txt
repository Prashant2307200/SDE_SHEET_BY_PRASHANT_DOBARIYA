    int f(vector<int>& height, int n, int k, vector<int>& dp){
        if(n < 2)   return 0;
        if(dp[n] != -1) return dp[n];
        int mini = INT_MAX;
        for(int j = 1; j <= k; ++j){
            if(j >= n)  break;
            int jThJump = f(height, n-j, k, dp) + abs(height[n-1]-height[n-1-j]);
            mini = min(mini, jThJump);
        }
        return dp[n] = mini;
    }
    int minimizeCost(vector<int>& height, int n, int k) {
        vector<int> dp(n+1);
        dp[0] = 0, dp[1] = 0;
        for(int i = 2; i <= n; ++i){
            int mini = INT_MAX;
            for(int j = 1; j <= k; ++j){
                if(j >= i)  break;
                int jThJump = dp[i-j] + abs(height[i-1]-height[i-1-j]);
                mini = min(mini, jThJump);
            }
            dp[i] = mini;
        }
        return dp[n];
    }