    int f(vector<int>& height, int n, vector<int>& dp){
        if(n < 3)   return abs(height[n-1] - height[0]);
        if(dp[n] != -1) return dp[n];
        int oneStair = f(height, n-1, dp) + abs(height[n-1]-height[n-2]);
        int twoStair = f(height, n-2, dp) + abs(height[n-1]-height[n-3]);
        return dp[n] = min(oneStair, twoStair);
    } 
    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(n+1, -1);
        dp[1] = 0, dp[2] = abs(height[1]-height[0]);
        for(int i = 3; i <= n; ++i){
            int oneStair = dp[i-1] + abs(height[i-1]-height[i-2]);
            int twoStair = dp[i-2] + abs(height[i-1]-height[i-3]);
            dp[i] = min(oneStair, twoStair);
        }
        return dp[n];
    }


    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(4);
        dp[1] = 0, dp[2] = abs(height[1]-height[0]);
        for(int i = 3; i <= n; ++i){
            int oneStair = dp[2] + abs(height[i-1]-height[i-2]);
            int twoStair = dp[1] + abs(height[i-1]-height[i-3]);
            dp[3] = min(oneStair, twoStair);
            dp[1] = dp[2], dp[2] = dp[3];
        }
        return n == 1 ? dp[1] : dp[2];
    }