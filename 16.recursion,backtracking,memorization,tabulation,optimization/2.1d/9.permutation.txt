void permutation(string s,string ans){
    if(!s.length()){
        cout << ans << endl;
        return;
    }for(int i=0;i<s.length();i++){
        char ch = s[i];
        string ros = s.substr(0,i)+s.substr(i+1);
        permutation(ros,ans+ch);
    }
}
    

class Solution {
    void f(vector<int>& nums, int idx, int n, vector<vector<int>>& ans) {
        if (idx == n) {
            ans.push_back(nums);
            return;
        }
        unordered_set<int> used;
        for (int i = idx; i < n; ++i) {
            if (used.find(nums[i]) != used.end()) continue;  
            used.insert(nums[i]);
            swap(nums[i], nums[idx]);
            f(nums, idx + 1, n, ans);
            swap(nums[i], nums[idx]);
        }
    }
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        f(nums, 0, nums.size(), ans);
        return ans;
    }
};

abc => 3p3 = 3! = 6

