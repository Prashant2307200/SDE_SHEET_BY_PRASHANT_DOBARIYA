class Solution {
    int f(int n, vector<int>& dp){
        if(n < 2)   return 1;
        if(dp[n] != -1) return dp[n];
        return dp[n] = f(n-1, dp) + f(n-2, dp);  
    }
public:
    int climbStairs(int n) {
        vector<int> dp(n+1);
        dp[0] = 1, dp[1] = 1;
        for(int i = 2; i <= n; ++i)
            dp[i] = dp[i-1] + dp[i-2];
        return dp[n];
    }
};


int climbStairs(int n) {
    vector<int> dp(3);
    dp[0] = 1, dp[1] = 1;
    for(int i = 2; i <= n; ++i){
        dp[2] = dp[0] + dp[1];
        dp[0] = dp[1], dp[1] = dp[2];
    }
    return n == 0 ? dp[0] : dp[1];
}


    
int tilingWays(int n){
    return ((n==0 || n==1)?1:tilingWays(n-1)+tilingWays(n-2));
}
        
int friendsPairing(int n){ 
    return ((n==0 || n==1 || n==2)?n:friendsPairing(n-1)+(n-1)*friendsPairing(n-2));
}

int countPath(int s,int e){
    if(s==e) return 1;
    if(s>e) return 0;
    int count = 0 ;
    for(int i=1;i<=6;i++)
        count += countPath(s+i,e);
    return count;
}