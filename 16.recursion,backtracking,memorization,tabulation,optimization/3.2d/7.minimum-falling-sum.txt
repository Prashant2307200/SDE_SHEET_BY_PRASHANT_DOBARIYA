class Solution {
    vector<vector<int>> dp;
    int dirs[3] = {-1,0,1};
    int f(int i,int j,int n,vector<vector<int>>& matrix){
        if(i < 0)  return 0;
        int mini = INT_MAX;
        if(j < 0 || j >= n) return mini;
        if(dp[i][j] != -1)  return dp[i][j];
        for(auto& dir: dirs)
            mini = min(mini,f(i-1,j+dir,n,matrix));
        return dp[i][j] = mini+matrix[i][j];
    }
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        dp = vector<vector<int>>(n,vector<int>(n,-1));
        int mini = INT_MAX,i = n-1,j = 0;
        for(j = 0; j < n; ++j)
            mini = min(mini,f(i,j,n,matrix));
        return mini;
    }
};


int minFallingPathSum(vector<vector<int>>& matrix) {
    int n = matrix.size();
    vector<vector<int>> dp(n,vector<int>(n,1e8));
    int mini = INT_MAX;
    int dirs[3] = {-1,0,1};
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
            for(auto& dir: dirs){
                int prev_col = j+dir;
                if(prev_col < 0 || prev_col >= n) continue;
                dp[i][j] = min(dp[i][j], i?dp[i-1][prev_col]:i);
            }
            dp[i][j] += matrix[i][j];
            if(i == n-1) 
            mini = min(mini,dp[i][j]);
        }
    }
    return mini;
}


int minFallingPathSum(vector<vector<int>>& matrix) {
    int n = matrix.size();
    vector<vector<int>> dp(2,vector<int>(n,1e8));
    int mini = INT_MAX;
    int dirs[3] = {-1,0,1};
    for(int i = 0; i < n; ++i){
        for(int j = 0; j < n; ++j){
            for(auto& dir: dirs){
                int prev_col = j+dir;
                if(prev_col < 0 || prev_col >= n) continue;
                dp[1][j] = min(dp[1][j], i?dp[0][prev_col]:i);
            }
            dp[1][j] += matrix[i][j];
            if(i == n-1) 
            mini = min(mini,dp[1][j]);
        }
        dp[0] = dp[1];
    }
    return mini;
}