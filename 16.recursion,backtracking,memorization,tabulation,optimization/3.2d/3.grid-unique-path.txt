class Solution {
    int f(int m, int n, vector<vector<int>>& dp){
        if(m < 1 || n < 1)  return 0;
        if(m == 1 && n == 1)    return 1;
        if(dp[m][n] != -1)  return dp[m][n];
        return dp[m][n] = f(m-1, n, dp) + f(m, n-1, dp);
    }
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        dp[1][1] = 1;
        for(int i = 1; i <= m; ++i){
            for(int j = 1; j <= n; ++j){
                if(i == 1 && j == 1)    continue;
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m][n];
    }
};


    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(2, vector<int>(n, 1));
        for(int i = 1; i < m; ++i){
            for(int j = 1; j < n; ++j){
                dp[1][j] = dp[0][j] + dp[1][j-1];
            }
            dp[0] = dp[1];
        }
        return dp[1][n-1];
    }


    int uniquePaths(int m, int n) {
        vector<int> dp(n, 1);
        for(int i = 1; i < m; ++i){
            for(int j = 1; j < n; ++j)
                dp[j] += dp[j-1];
        }
        return dp[n-1];
    }


class Solution {
    int nCr(int n, int r){
        double ans = 1;
        for(int i = 1; i <= r; ++i){
            ans *= n-r+i;
            ans /= i;
        }
        return (int)ans;
    }
public:
    int uniquePaths(int m, int n) {
        int num = m+n-2;
        int r = min(m, n)-1;
        return nCr(num, r); 
    }
};