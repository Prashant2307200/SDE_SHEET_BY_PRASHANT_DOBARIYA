class Solution {
    vector<int> dirs = {-1,0,1};
    vector<vector<vector<int>>> dp;
    int f(int i,int j1,int j2,int m,int n,vector<vector<int>>& grid){
        if(i >= m)  return 0;
        int maxi = -1e8;
        if(j1 < 0 || j1 >= n || j2 < 0 || j2 >= n)  return maxi;
        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];
        for(auto& dir1: dirs){
            for(auto& dir2: dirs){
                maxi = max(maxi,
                j1 == j2 ? 
                f(i+1,j1+dir1,j2+dir2,m,n,grid)+grid[i][j1] :
                f(i+1,j1+dir1,j2+dir2,m,n,grid)+grid[i][j1]+grid[i][j2]);
            }
        }
        return dp[i][j1][j2] = maxi;
    }
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size(),n = grid[0].size();
        int i = 0,j1 = 0,j2 = n-1;
        dp = vector<vector<vector<int>>>(m,vector<vector<int>>(n,vector<int>(n,-1)));
        return f(i,j1,j2,m,n,grid);
    }
};


int cherryPickup(vector<vector<int>>& grid) {
    int m = grid.size(),n = grid[0].size();
    dp = vector<vector<vector<int>>>(m,vector<vector<int>>(n,vector<int>(n,-1e8)));
    for(int i = m-1; i >= 0; --i){
        for(int j1 = 0; j1 < n; ++j1){
            for(int j2 = 0; j2 < n; ++j2){
                for(auto& dir1: dirs){
                    for(auto& dir2: dirs){
                        int prev_col1 = j1+dir1;
                        int prev_col2 = j2+dir2;
                        if(prev_col1 >= n || prev_col2 >= n || prev_col1 < 0 || prev_col2 < 0)continue;
                        dp[i][j1][j2] = max(dp[i][j1][j2],
                        j1 == j2 ? 
                        (i == m-1 ? 0:dp[i+1][prev_col1][prev_col2])+grid[i][j1] :
                        (i == m-1 ? 0:dp[i+1][prev_col1][prev_col2])+grid[i][j1]+grid[i][j2]);
                    }
                }
            }
        }
    }
    return dp[0][0][n-1];
}


int cherryPickup(vector<vector<int>>& grid) {
    int m = grid.size(),n = grid[0].size();
    dp = vector<vector<vector<int>>>(2,vector<vector<int>>(n,vector<int>(n,-1e8)));
    for(int i = m-1; i >= 0; --i){
        for(int j1 = 0; j1 < n; ++j1){
            for(int j2 = 0; j2 < n; ++j2){
                for(auto& dir1: dirs){
                    for(auto& dir2: dirs){
                        int prev_col1 = j1+dir1;
                        int prev_col2 = j2+dir2;
                        if(prev_col1 >= n || prev_col2 >= n || prev_col1 < 0 || prev_col2 < 0)continue;
                        dp[1][j1][j2] = max(dp[1][j1][j2],
                        j1 == j2 ? 
                        (i == m-1 ? 0:dp[0][prev_col1][prev_col2])+grid[i][j1] :
                        (i == m-1 ? 0:dp[0][prev_col1][prev_col2])+grid[i][j1]+grid[i][j2]);
                    }
                }
            }
        }
        dp[0] = dp[1];
    }
    return dp[0][0][n-1];
}