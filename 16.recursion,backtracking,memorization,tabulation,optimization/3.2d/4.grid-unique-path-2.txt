class Solution {
    int f(vector<vector<int>>& grid, int m, int n, vector<vector<int>>& dp){
        if(m < 1 || n < 1)  return 0;
        if(grid[m-1][n-1])  return 0;
        if(m == 1 && n == 1)    return 1;
        if(dp[m][n] != -1)  return dp[m][n];
        return dp[m][n] = f(grid, m-1, n, dp) + f(grid, m, n-1, dp);
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0])  return 0;
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        dp[1][1] = 1;
        for(int i = 1; i <= m; ++i){
            for(int j = 1; j <= n; ++j){
                if(i == 1 && j == 1)    continue;
                if(obstacleGrid[i-1][j-1])  continue;
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m][n];
    }
};


    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0])  return 0;
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(2, vector<int>(n+1, 0));
        dp[1][1] = 1;
        for(int i = 1; i <= m; ++i){ 
            for(int j = 1; j <= n; ++j){
                if(i == 1 && j == 1)    continue;
                if(obstacleGrid[i-1][j-1]){
                    dp[1][j] = 0;
                    continue;
                }
                dp[1][j] = dp[0][j] + dp[1][j-1];
            }
            dp[0] = dp[1];
        }
        return dp[m != 0][n];
    }


    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0])  return 0;
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<int> dp(n+1, 0);
        for(int i = 1; i <= m; ++i){ 
            for(int j = 1; j <= n; ++j){
                if(i == 1 && j == 1){
                    dp[j] = 1;
                    continue;
                }
                if(obstacleGrid[i-1][j-1]){
                    dp[j] = 0;
                    continue;
                }
                dp[j] += dp[j-1];
            } 
        }
        return dp[n];
    }