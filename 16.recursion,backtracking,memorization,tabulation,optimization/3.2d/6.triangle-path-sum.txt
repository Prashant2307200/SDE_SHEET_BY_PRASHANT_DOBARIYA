class Solution {
    int f(vector<vector<int>>& triangle,int n,int i,int j,int** dp){
        if(i >= n)  return 0;
        if(dp[i][j] != -1)  return dp[i][j];
        int down = f(triangle,n,i+1,j,dp);
        int diag = f(triangle,n,i+1,j+1,dp);
        return dp[i][j] = min(down,diag) + triangle[i][j];
    }
public:
    int minimumTotal(vector<vector<int>>& triangle) {

        int n = triangle.size(), i = 0, j = 0;

        int** dp = new int*[n+1];
        for(int i = 0; i <= n; ++i)
            dp[i] = new int[i+1];

        // for(int i = 0; i <= n; ++i){
        //     for(int j = 0; j <= i; ++j)
        //         dp[i][j] = -1;
        // }

        for(int i = 0; i <= n; ++i) dp[n][i] = 0;

        for(int i = n-1; i >= 0; --i){
            for(int j = 0; j <= i; ++j)
                dp[i][j] = min(dp[i+1][j],dp[i+1][j+1]) + triangle[i][j];
        }

        int ans = dp[i][j];
        // int ans = f(triangle,n,i,j,dp);
        
        for(int i = 0; i <= n; ++i)
            delete []dp[i];
        delete []dp;

        return ans;
    }
};


int minimumTotal(vector<vector<int>>& triangle) {
    int n = triangle.size();
    vector<vector<int>> dp(2, vector<int>(n+1,0));
    for(int i = n-1; i >= 0; --i){
        for(int j = i; j >= 0; --j)
            dp[1][j] = triangle[i][j] + min(dp[0][j],dp[0][j+1]);
        dp[0] = dp[1];
    }
    return dp[0][0];
}
  