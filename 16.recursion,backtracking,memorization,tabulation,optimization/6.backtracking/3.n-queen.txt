class Solution {
    bool isSafe(vector<vector<string>>& ans,vector<string>& board,
    int x,int y,int n){
        int row = x ,col = y;
        while(row >= 0){
            if(board[row][y] == 'Q'){
                return 0;
            }
            row--;
        }
        row = x ,col = y;
        while(row >= 0 && col >= 0){
            if(board[row][col] == 'Q'){
                return 0;
            }
            row-- ,col--;
        }
        row = x ,col = y;
        while(row >= 0 && col < n){
            if(board[row][col] == 'Q'){
                return 0;
            }
            row-- ,col++;
        }
        return 1;
    }
    void isPlace(vector<vector<string>>& ans,vector<string>& board,
    int x,int y,int n){
        if(x >= n){
            ans.push_back(board);
            return;
        }
        for(int col = 0; col < n; ++col){
            if(isSafe(ans,board,x,col,n)){
                board[x][col] = 'Q';
                isPlace(ans,board,x+1,col,n);
                board[x][col] = '.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n,string(n,'.'));
        isPlace(ans,board,0,0,n);
        return ans;
    }
};