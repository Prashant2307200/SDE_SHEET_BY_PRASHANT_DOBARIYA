class Solution {
    int f(int i, int op, int k, vector<int>& prices, int n) {
        if(i == n)
            return 0;
        if(op == 2*k)
            return 0;
        int profit = 0;
        if(op%2) {
            int inc = prices[i] + f(i+1, op+1, k, prices, n);
            int exc = f(i+1, op, k, prices, n);
            profit = max(inc, exc);
        }
        else {
            int inc = -prices[i] + f(i+1, op+1, k, prices, n);
            int exc = f(i+1, op, k, prices, n);
            profit = max(inc, exc);
        }
        return profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        return f(0, 0, k, prices, n);
    }
};


class Solution {
    vector<vector<int>> dp;
    int f(int i, int op, int k, vector<int>& prices, int n) {
        if(i == n)
            return 0;
        if(op == 2*k)
            return 0;
        if(dp[i][op] != -1)
            return dp[i][op];
        int profit = 0;
        if(op%2) {
            int inc = prices[i] + f(i+1, op+1, k, prices, n);
            int exc = f(i+1, op, k, prices, n);
            profit = max(inc, exc);
        }
        else {
            int inc = -prices[i] + f(i+1, op+1, k, prices, n);
            int exc = f(i+1, op, k, prices, n);
            profit = max(inc, exc);
        }
        return dp[i][op] = profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        dp = vector<vector<int>> (n+1, vector<int> (2*k + 1, -1));
        return f(0, 0, k, prices, n);
    }
};


class Solution { 
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size(), op = 2*k;
        vector<vector<int>> dp = vector<vector<int>> (n+1, vector<int> (op+1, 0));
        for(int i = n-1; i >= 0; --i) {
            for(int j = 0; j < op; ++j) {
                int profit = 0;
                if(j%2) {
                    int inc = prices[i] + dp[i+1][j+1];
                    int exc = dp[i+1][j];
                    profit = max(inc, exc);
                }
                else {
                    int inc = -prices[i] + dp[i+1][j+1];
                    int exc = dp[i+1][j];
                    profit = max(inc, exc);
                }
                dp[i][j] = profit;
            }
        }
        return dp[0][0];
    }
};


class Solution { 
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size(), op = 2*k;
        vector<int> dp0, dp1;
        dp0 = dp1 = vector<int> (op+1, 0);
        for(int i = n-1; i >= 0; --i) {
            for(int j = 0; j < op; ++j) {
                int profit = 0;
                if(j%2) {
                    int inc = prices[i] + dp0[j+1];
                    int exc = dp0[j];
                    profit = max(inc, exc);
                }
                else {
                    int inc = -prices[i] + dp0[j+1];
                    int exc = dp0[j];
                    profit = max(inc, exc);
                }
                dp1[j] = profit;
            }
            dp0 = dp1;
        }
        return dp0[0];
    }
};


    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size(), op = 2*k;
        vector<int> dp0 = vector<int> (op+1, 0);
        for(int i = n-1; i >= 0; --i) {
            for(int j = 0; j < op; ++j) 
                dp0[j] = max(dp0[j], dp0[j+1]+(j%2?1:-1)*prices[i]);
        }
        return dp0[0];
    }