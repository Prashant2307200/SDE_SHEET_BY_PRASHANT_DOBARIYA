class Solution {
    vector<vector<int>> dp;
    int f(int m, int n, string text1, string text2) {
        if(!m || !n)
            return 0;
        if(text1[m-1] == text2[n-1])
            return dp[m][n] = 1 + f(m-1, n-1, text1, text2);
        return dp[m][n] = max(f(m-1, n, text1, text2), f(m, n-1, text1, text2));
    }
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        dp = vector<vector<int>> (m+1, vector<int> (n+1, 0));
        for(int i = 1; i <= m; ++i) {
            for(int j = 1; j <= n; ++j) {
                if(text1[i-1] == text2[j-1]) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                    continue;
                }
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m][n];
    }
};


    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        vector<vector<int>>dp (2, vector<int> (n+1, 0));
        for(int i = 1; i <= m; ++i) {
            for(int j = 1; j <= n; ++j) {
                if(text1[i-1] == text2[j-1]) {
                    dp[1][j] = 1 + dp[0][j-1];
                    continue;
                }
                dp[1][j] = max(dp[0][j], dp[1][j-1]);
            }
            dp[0] = dp[1];
        }
        return dp[0][n];
    }

    abcde bdgek bde