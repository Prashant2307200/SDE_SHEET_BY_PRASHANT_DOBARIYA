class Solution {
    unordered_map<string,bool> dp;
    bool solve(int idx,string s,int n,unordered_set<string>& st){
        if(idx >= n){
            return 1;
        }
        if(dp.find(s) != dp.end()){
            return dp[s];
        }
        for(int l = 1; l <= n; ++l){
            if(st.find(s.substr(idx,l)) != st.end() && solve(idx+l,s,n,st)){
                return dp[s] = 1;
            }
        }
        return dp[s] = 0;
    }
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.size();
        unordered_set<string> st(wordDict.begin(),wordDict.end());
        if(st.find(s) != st.end()){
            return 1;
        }
        return solve(0,s,n,st);
    }
};