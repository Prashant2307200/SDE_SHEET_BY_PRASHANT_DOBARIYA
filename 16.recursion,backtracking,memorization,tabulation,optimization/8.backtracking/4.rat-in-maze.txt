vector<vector<int>> dirs = {
    {1,0,'D'},
    {-1,0,'U'},
    {0,1,'R'},
    {0,-1,'L'}
    
};
bool isSafe(int i,int j,int n,vector<vector<int>> &m){
    return i >= 0 && i < n && j >= 0 && j < n && m[i][j];
}
void isMove(int i,int j,
    vector<vector<int>> &m,int n,vector<string>& ans,string path){
    if(i == n-1 && j == n-1){
        ans.push_back(path);
        return;
    }/*
    if(i < 0 || j < 0 || i >= n || j >= n){
        return;
    }
    if(!m[i][j]){
        return;
    }*/
    m[i][j] = 0;
    for(auto& dir: dirs){
        int new_i = i+dir[0];
        int new_j = j+dir[1];
        if(isSafe(new_i,new_j,n,m)){
            path.push_back(dir[2]);
            isMove(new_i,new_j,m,n,ans,path);
            path.pop_back();
        }
    }
    m[i][j] = 1;
    return;
} 
vector<string> findPath(vector<vector<int>> &m, int n) {
    vector<string> ans;
    string path;
    if(!m[0][0] || !m[n-1][n-1])    return ans;
    isMove(0,0,m,n,ans,path);
    return ans;
}