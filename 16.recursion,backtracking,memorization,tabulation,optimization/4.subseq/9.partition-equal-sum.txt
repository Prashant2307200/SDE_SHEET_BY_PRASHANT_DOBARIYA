class Solution {
    bool isSubsetSum(vector<int>arr, int sum){
        int n = arr.size();
        vector<vector<int>> dp(2,vector<int>(sum+1,0));
        dp[0][0] = 1;
        for(int i = 1; i <= n; ++i){
            for(int j = 0; j <= sum; ++j){
                if(i == 0 && j == 0)    continue;
                if(j < arr[i-1]){
                    dp[1][j] = dp[0][j];
                    continue;
                }
                dp[1][j] = dp[0][j]|dp[0][j-arr[i-1]];
            }
            dp[0] = dp[1];
        }
        return dp[0][sum];
    }
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int sum = accumulate(nums.begin(),nums.end(),0);
        if(sum%2 == 1)  return 0;
        sum /= 2;
        return isSubsetSum(nums,sum);
    }
};