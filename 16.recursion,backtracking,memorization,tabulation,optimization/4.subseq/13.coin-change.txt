class Solution {
    vector<vector<int>> dp;
    int f(int n, int amount, vector<int>& coins) {
        if(n == 0) 
            return amount ? 1e8 : 0;
        if(dp[n][amount] != -1)
            return dp[n][amount];
        int exc = f(n-1, amount, coins);
        if(coins[n-1] > amount)
            return exc;
        int inc = f(n, amount-coins[n-1], coins) + 1;
        return dp[n][amount] = min(inc, exc);
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        dp = vector<vector<int>> (2, vector<int> (amount+1, 1e8));
        dp[0][0] = 0; 
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= amount; ++j) {
                dp[1][j] = dp[0][j];
                if(coins[i-1] <= j) 
                    dp[1][j] = min(dp[1][j], dp[1][j-coins[i-1]] + 1);
            }
            dp[0] = dp[1];
        }
        int ans = dp[n != 0][amount];
        return ans == 1e8 ? -1 : ans;
    }
};