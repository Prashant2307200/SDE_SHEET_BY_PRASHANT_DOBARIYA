    vector<vector<int>> dp;
    int f(int N, int W, int val[], int wt[]) {
        if(!N)
            return 0;
        if(dp[N][W] != -1)
            return dp[N][W];
        int exc = f(N-1, W, val, wt);
        if(wt[N-1] > W)
            return dp[N][W] = exc;
        int inc = f(N, W-wt[N-1], val, wt) + val[N-1];
        return dp[N][W] = max(inc, exc);
    }
public:
    int knapSack(int N, int W, int val[], int wt[]) {
        dp = vector<vector<int>> (1, vector<int> (W+1, 0));
        for(int i = 1; i <= N; ++i) {
            for(int j = wt[i-1]; j <= W; ++j) 
                dp[0][j] = max(dp[0][j], dp[0][j-wt[i-1]] + val[i-1]);
        }
        return dp[0][W];
    } 