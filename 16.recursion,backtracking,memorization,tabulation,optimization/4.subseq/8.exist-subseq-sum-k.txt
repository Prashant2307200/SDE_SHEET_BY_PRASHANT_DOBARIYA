vector<vector<int>> dp;
bool f(vector<int>& arr,int n,int sum){
    if(n == 0)  return sum == 0;
    if(sum < arr[n-1])  return f(arr,n-1,sum);
    if(dp[n][sum] != -1)    return dp[n][sum];
    return dp[n][sum] = f(arr,n-1,sum)||f(arr,n-1,sum-arr[n-1]);
}
bool isSubsetSum(vector<int>arr, int sum){
    int n = arr.size();
    dp = vector<vector<int>>(n+1,vector<int>(sum+1,0));
    dp[0][0] = 1;
    for(int i = 1; i <= n; ++i){
        for(int j = 0; j <= sum; ++j){
            if(i == 0 && j == 0)    continue;
            if(j < arr[i-1]){
                dp[i][j] = dp[i-1][j];
                continue;
            }    
            dp[i][j] = dp[i-1][j]|dp[i-1][j-arr[i-1]];
        }
    }
    return dp[n][sum];
}


bool isSubsetSum(vector<int>arr, int sum){
    int n = arr.size();
    vector<vector<int>> dp(2,vector<int>(sum+1,0));
    dp[0][0] = 1;
    for(int i = 1; i <= n; ++i){
        for(int j = 0; j <= sum; ++j){
            if(i == 0 && j == 0)    continue;
            if(j < arr[i-1]){
                dp[1][j] = dp[0][j];
                continue;
            }
            dp[1][j] = dp[0][j]|dp[0][j-arr[i-1]];
        }
        dp[0] = dp[1];
    }
    return dp[0][sum];
}