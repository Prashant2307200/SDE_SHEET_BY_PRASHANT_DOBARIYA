    Node* copyRandomList(Node* head) {
        Node* temp = head;
        map<Node*, Node*> hsh;
        while(temp) {
            hsh.insert({temp, new Node(temp -> val)});
            temp = temp -> next;
        }
        temp = head;
        while(temp) {
            Node* cpy = hsh[temp];
            Node* frontNext = temp -> next;
            Node* frontRand = temp -> random;
            cpy -> next = hsh[frontNext];
            cpy -> random = hsh[frontRand];
            temp = temp -> next;
        }
        return hsh[head];
    }


class Solution {
void insertCopyInBetween(Node* head){
    Node* temp = head;
    while(temp){
        Node* nextElement = temp -> next;
        Node* copy = new Node(temp -> val);  
        copy -> next = nextElement;  
        temp->next = copy;         
        temp = nextElement;         
    }
}
void connectRandomPointers(Node* head){
    Node* temp = head;
    while(temp != NULL){
        Node* copyNode = temp -> next;    
        if(temp->random) 
            copyNode -> random = temp -> random -> next; 
        else
            copyNode -> random = NULL;   
        temp = temp -> next -> next;   
    }
}
Node* getDeepCopyList(Node* head){
    Node* temp = head;
    Node* dummyNode = new Node(-1);   
    Node* res = dummyNode;             
    while(temp != NULL){ 
        res -> next = temp -> next;
        res = res -> next; 
        temp -> next = temp -> next -> next;
        temp = temp -> next;
    } 
    return dummyNode -> next;   
}
public:
    Node* copyRandomList(Node *head){
        if(!head) 
            return nullptr;   
        insertCopyInBetween(head); 
        connectRandomPointers(head);  
        return getDeepCopyList(head); 
    }
};