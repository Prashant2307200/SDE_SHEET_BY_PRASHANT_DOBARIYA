    ListNode* middleNode(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast && fast -> next) 
            slow = slow -> next, fast = fast -> next -> next;
        return slow;
    }


class Solution {
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* dummyNode = new ListNode(-1);
        ListNode* p = dummyNode;
        ListNode* p1 = list1;
        ListNode* p2 = list2;
        while(p1 || p2) {
            if(p1 && p2) {
                if(p1 -> val < p2 -> val) 
                    p -> next = p1, p1 = p1 -> next;
                else 
                    p -> next = p2, p2 = p2 -> next;
            }
            else if(p1) 
                p -> next = p1, p1 = p1 -> next;
            else 
                p -> next = p2, p2 = p2 -> next;
            p = p -> next;
        }
        return dummyNode -> next;
    }
    ListNode* findMid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head -> next;
        while(fast && fast -> next)
            slow = slow -> next, fast = fast -> next -> next;
        ListNode* mid = slow -> next;
        slow -> next = NULL;
        return mid;
    }
    ListNode* mergeSort(ListNode* head){
        if(head == NULL || head->next == NULL)
            return head;
        ListNode* mid = findMid(head);
        ListNode* l1 = mergeSort(head);
        ListNode* l2 = mergeSort(mid);
        return mergeTwoLists(l1,l2);
    }
public:
    ListNode* sortList(ListNode* head) {
        return mergeSort(head);
    }
};